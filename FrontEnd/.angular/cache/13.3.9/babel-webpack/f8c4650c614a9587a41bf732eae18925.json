{"ast":null,"code":"import { BehaviorSubject } from \"rxjs\";\nimport { HttpClient } from \"@angular/common/http\";\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nexport let DataService = /*#__PURE__*/(() => {\n  class DataService {\n    constructor(http) {\n      this.http = http;\n      this.API_URL = \"https://localhost:44338/api/Branch\";\n      this.API_URL_Currencies = \"https://localhost:44338/api/Currency\";\n      this.dataChange = new BehaviorSubject([]);\n      this.dataCurrencyChange = new BehaviorSubject([]);\n    }\n\n    get data() {\n      return this.dataChange.value;\n    }\n\n    get dataCurrency() {\n      return this.dataCurrencyChange.value;\n    }\n\n    getDialogData() {\n      return this.dialogData;\n    }\n\n    getAllBranchs(id) {\n      const url = !id ? \"\" : `?BranchId=${id}`;\n      this.http.get(`${this.API_URL}${url}`).subscribe(data => {\n        this.dataChange.next(data.result);\n      }, error => {\n        console.log(error.name + \" \" + error.message);\n      });\n    }\n\n    getAllCurrencies() {\n      this.http.get(`${this.API_URL_Currencies}`).subscribe(data => {\n        return;\n        console.log(data);\n        this.dataCurrencyChange.next(data.result);\n      }, error => {\n        console.log(error.name + \" \" + error.message);\n      });\n    }\n\n    addBranch(branch) {\n      this.http.post(`${this.API_URL}`, branch).subscribe(data => this.dialogData = data.result, error => {\n        console.log(error.name + \" \" + error.message);\n      });\n    }\n\n    updateBranch(branch) {\n      if (!branch.branchId) throw Error(\"Id is required\");\n      this.http.put(`${this.API_URL}`, branch).subscribe(data => this.dialogData = data.result, error => {\n        console.log(error.name + \" \" + error.message);\n      });\n    }\n\n    deleteBranchById(id) {\n      this.http.delete(`${this.API_URL}?BranchId=${id}`).subscribe(data => {}, error => {\n        console.log(error.name + \" \" + error.message);\n      });\n    }\n\n  }\n\n  DataService.ɵfac = function DataService_Factory(t) {\n    return new (t || DataService)(i0.ɵɵinject(i1.HttpClient));\n  };\n\n  DataService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: DataService,\n    factory: DataService.ɵfac\n  });\n  return DataService;\n})();","map":null,"metadata":{},"sourceType":"module"}