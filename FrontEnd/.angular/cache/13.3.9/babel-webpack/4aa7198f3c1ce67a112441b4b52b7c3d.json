{"ast":null,"code":"import { HttpClient } from '@angular/common/http';\nimport { environment } from 'src/environments/environment';\nimport { BehaviorSubject } from 'rxjs';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nexport let BranchesService = /*#__PURE__*/(() => {\n  class BranchesService {\n    constructor(http) {\n      this.http = http;\n      this.API_URL = environment.baseUrl;\n      this.dataChange = new BehaviorSubject([]);\n    }\n\n    get data() {\n      return this.dataChange.value;\n    }\n\n    getDialogData() {\n      return this.dialogData;\n    }\n\n    getBranches(id) {\n      const url = !id ? '' : `?BranchId=${id}`;\n      this.http.get(`${this.API_URL}${url}`).subscribe(data => {\n        this.dataChange.next(data);\n      }, error => {\n        console.log(error.name + ' ' + error.message);\n      });\n    }\n\n    addBranch(branch) {\n      this.http.post(`${this.API_URL}`, branch).subscribe(data => this.dialogData = data, error => {\n        console.log(error.name + ' ' + error.message);\n      });\n    }\n\n    updateBranch(branch) {\n      if (!branch.branchId) throw Error('Id is required');\n      this.http.put(`${this.API_URL}`, branch).subscribe(data => this.dialogData = data, error => {\n        console.log(error.name + ' ' + error.message);\n      });\n    }\n\n    deleteBranchById(id) {\n      this.http.delete(`${this.API_URL}?BranchId=${id}`).subscribe(data => this.dialogData = data, error => {\n        console.log(error.name + ' ' + error.message);\n      });\n    }\n\n  }\n\n  BranchesService.ɵfac = function BranchesService_Factory(t) {\n    return new (t || BranchesService)(i0.ɵɵinject(i1.HttpClient));\n  };\n\n  BranchesService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: BranchesService,\n    factory: BranchesService.ɵfac,\n    providedIn: 'root'\n  });\n  return BranchesService;\n})();","map":null,"metadata":{},"sourceType":"module"}